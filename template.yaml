AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: The required parameters
        Parameters:
          - DomainName
      - Label:
          default: Step 2
        Parameters:
          - SesSmtpPassword
      - Label:
          default: Parameters that are useful for debugging
        Parameters:
          - EnableDebugLogs
          - SentryDsn
    ParameterLabels:
      DomainName:
        default: Domain name on which Ghost will be available
      SesSmtpPassword:
        default: Amazon SES SMTP password

Parameters:
  DatabasePassword:
    Type: String
    Default: password12345
    NoEcho: true
    Description: please set a sensible master password for the database
  DomainName:
    Type: String
    Description: We really need one to issue an SSL cert and to allow proper routing
  EnableDebugLogs:
    Type: String
    AllowedValues:
      - true
      - false
    Default: false
    Description: enable debug logs on the serverless function?
  EnableNat:
    Type: String
    AllowedValues:
      - true
      - false
    Default: false
    Description: Create a nat gateway for outbound traffic, e.g send emails and Sentry error tracking
  SentryDsn:
    Type: String
    Description: Put your Sentry DSN for error monitoring.
    Default: ''
    NoEcho: true
  Memory:
    Type: Number
    Default: 1024
    AllowedValues:
      - 256
      - 512
      - 1024
      - 2048
      - 3008
    Description: 1024 MB is a reasonable balance between performance and price. Less than that will result in poor cold starts.
  SesSmtpPassword:
    Type: String
    Default: ''
    Description: SES secret access key. See deployment.md on an easy way to get it after stack is created
    NoEcho: true
  UseServerlessDb:
    Type: String
    Default: true
    Description: Aurora serverless is faster to initialise but expensive in the long run. set to false to create t3.micro instead
    AllowedValues:
      - true
      - false

Conditions:
  isDebug: !Equals [!Ref EnableDebugLogs, true]
  isServerless: !Equals [!Ref UseServerlessDb, true]
  isNotServerless: !Not [!Equals [!Ref UseServerlessDb, true]]

Mappings:
  Constants:
    Values:
      ContentPath: /mnt/content
      DatabaseName: ghost
      DatabaseUser: dbadmin

Resources:
  Fn:
    Type: AWS::Serverless::Function
    DependsOn:
      - MountTarget1
      - MountTarget2
    Properties:
      CodeUri: ./src.zip
      Environment:
        Variables:
          DEBUG: !If [isDebug, '*', !Ref 'AWS::NoValue']
          database__client: mysql
          paths__contentPath: !FindInMap [Constants, Values, ContentPath]
          database__connection__host: !If [isServerless, !GetAtt ServerlessDb.Endpoint.Address, !GetAtt Db.Endpoint.Address]
          database__connection__database: !FindInMap [Constants, Values, DatabaseName]
          database__connection__user: !FindInMap [Constants, Values, DatabaseUser]
          database__connection__password: !Ref DatabasePassword
          logging__level: !If [isDebug, debug, !Ref 'AWS::NoValue']
          mail__options__auth__pass: !Ref SesSmtpPassword
          mail__options__auth__user: !Ref AccessKey
          mail__options__host: email-smtp.us-east-1.amazonaws.com
          mail__options__port: 465
          mail__options__service: SES
          mail__transport: SMTP
          paths__appRoot: /var/task
          sentry__dsn: !Ref SentryDsn
          storage__active: s3
          storage__s3__accessKeyId: !Ref AccessKey
          storage__s3__assetHost: !Sub https://${Cdn.DomainName}
          storage__s3__bucket: !Ref Bucket
          storage__s3__secretAccessKey: !GetAtt AccessKey.SecretAccessKey
          storage__s3__pathPrefix: assets
          storage__s3__acl: bucket-owner-full-control
          url: !Sub https://${DomainName}
      FileSystemConfigs:
        - Arn: !GetAtt ContentAp.Arn
          LocalMountPath: !FindInMap [Constants, Values, ContentPath]
      Handler: index.handler
      Layers:
        - !Ref NodeModules
      MemorySize: !Ref Memory
      Runtime: nodejs16.x
      VpcConfig:
        SecurityGroupIds:
          - !Ref FnSg
        SubnetIds:
          - !GetAtt Vpc.Outputs.privateSubnet1ID
          - !GetAtt Vpc.Outputs.privateSubnet2ID
      Timeout: 120

  RootPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Fn
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*/

  ProxyPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Fn
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*/*

  Api:
    Type: AWS::Serverless::Api
    Properties:
      BinaryMediaTypes: ['*~1*']
      DefinitionBody:
        info:
          title: !Ref AWS::StackName
        paths:
          /{proxy+}:
            x-amazon-apigateway-any-method:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Fn.Arn}/invocations'
          /:
            x-amazon-apigateway-any-method:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Fn.Arn}/invocations'
        swagger: '2.0'
      Domain:
        CertificateArn: !Ref Certificate
        DomainName: !Ref DomainName
      StageName: Prod

  NodeModules:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleRuntimes:
        - nodejs16.x
      ContentUri: ./node-modules.zip
      RetentionPolicy: Delete

  Certificate:
    Properties:
      DomainName: !Sub '*.${DomainName}'
      DomainValidationOptions:
        - DomainName: !Sub '*.${DomainName}'
          ValidationDomain: !Sub '*.${DomainName}'
        - DomainName: !Ref DomainName
          ValidationDomain: !Ref DomainName
      SubjectAlternativeNames:
        - !Sub '*.${DomainName}'
        - !Ref DomainName
      ValidationMethod: DNS
    Type: AWS::CertificateManager::Certificate

  Disk:
    Type: AWS::EFS::FileSystem

  ContentAp:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref Disk
      PosixUser:
        Gid: '1000'
        Uid: '1000'
      RootDirectory:
        CreationInfo:
          OwnerGid: '1000'
          OwnerUid: '1000'
          Permissions: '0777'
        Path: /ghost/content

  MountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Disk
      SubnetId: !GetAtt Vpc.Outputs.privateSubnet1ID
      SecurityGroups: [!Ref EfsSg]

  MountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Disk
      SubnetId: !GetAtt Vpc.Outputs.privateSubnet2ID
      SecurityGroups: [!Ref EfsSg]

  ServerlessDb:
    Type: AWS::RDS::DBCluster
    DeletionPolicy: Snapshot
    Condition: isServerless
    Properties:
      DatabaseName: !FindInMap [Constants, Values, DatabaseName]
      DBSubnetGroupName: !Ref SubnetGroup
      #DeletionProtection: true
      EnableHttpEndpoint: true
      Engine: aurora-mysql
      #EngineMode: serverless
      MasterUsername: !FindInMap [Constants, Values, DatabaseUser]
      MasterUserPassword: !Ref DatabasePassword
      ServerlessV2ScalingConfiguration:
        MinCapacity: !Ref MinCapacity
        MaxCapacity: !Ref MaxCapacity
      #ScalingConfiguration:
      #  AutoPause: true
      #  MinCapacity: 1
      #  MaxCapacity: 1
      #  SecondsUntilAutoPause: 3600
      Tags:
        - Key: Project
          Value: !Ref AWS::StackName
      VpcSecurityGroupIds:
        - !Ref DbSg
  
  ServerlessDbInstance:
    Type: 'AWS::RDS::DBInstance'
    Condition: isServerless
    Properties:
      Engine: aurora-mysql
      DBInstanceClass: db.serverless
      DBClusterIdentifier: !Ref RDSDBCluster

  Db:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot
    Condition: isNotServerless
    Properties:
      AllocatedStorage: 10
      DBInstanceClass: db.t3.micro
      DBName: !FindInMap [Constants, Values, DatabaseName]
      DBSubnetGroupName: !Ref SubnetGroup
      DeletionProtection: true
      Engine: mysql
      EngineVersion: 5.7
      MasterUsername: !FindInMap [Constants, Values, DatabaseUser]
      MasterUserPassword: !Ref DatabasePassword
      Tags:
        - Key: Project
          Value: !Ref AWS::StackName
      VPCSecurityGroups: [!Ref DbSg]

  EfsSg:
    Properties:
      GroupDescription: ghost filesystem security group
      SecurityGroupIngress:
        - FromPort: 2049
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref FnSg
          ToPort: 2049
      VpcId: !GetAtt Vpc.Outputs.pubPrivateVPCID
    Type: AWS::EC2::SecurityGroup

  FnSg:
    Properties:
      GroupDescription: ghost fn security group
      VpcId: !GetAtt Vpc.Outputs.pubPrivateVPCID
    Type: AWS::EC2::SecurityGroup

  DbSg:
    Properties:
      GroupDescription: ghost DB security group
      SecurityGroupIngress:
        - FromPort: 3306
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref FnSg
          ToPort: 3306
      VpcId: !GetAtt Vpc.Outputs.pubPrivateVPCID
    Type: AWS::EC2::SecurityGroup

  SubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: ghost blog subnet group
      DBSubnetGroupName: !Sub ${AWS::StackName}-subnet-group
      SubnetIds:
        - !GetAtt Vpc.Outputs.privateSubnet1ID
        - !GetAtt Vpc.Outputs.privateSubnet2ID

  User:
    Type: AWS::IAM::User
    Properties:
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: ses:SendRawEmail
                Resource: '*'
          PolicyName: ghost-send-email
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: s3:ListBucket
                Resource: !Sub 'arn:aws:s3:::${Bucket}'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:PutObjectVersionAcl
                  - s3:DeleteObject
                  - s3:PutObjectAcl
                Resource: !Sub 'arn:aws:s3:::${Bucket}/*'
          PolicyName: s3-storage

  AccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref User

  Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: ['s3:GetObject']
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${OriginAccessIdentity}'
            Resource: [!Sub '${Bucket.Arn}/assets/*']

  Cdn:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          TargetOriginId: origin1
          ViewerProtocolPolicy: redirect-to-https
        Enabled: true
        Origins:
          - DomainName: !GetAtt Bucket.RegionalDomainName
            Id: origin1
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${OriginAccessIdentity}

  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub CloudFront OriginAccessIdentity for ${Bucket}

  Vpc:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./vpc-privatepublic.yaml
      Parameters:
        EnableNat: !Ref EnableNat

Outputs:
#  SecretAccessKey:
#    Value: !GetAtt AccessKey.SecretAccessKey
#    Description: Used to derive SES smtp password
  PingUrl:
    Value: !Sub https://${DomainName}/ghost/api/v3/admin/site/
    Description: Please hit only this url to let ghost start initialisation
  WebsiteDns:
    Value: !GetAtt Api.DomainName.RegionalDomainName
    Description: Put this value as CNAME for your domain
